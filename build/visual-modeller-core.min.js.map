{"version":3,"file":"visual-modeller-core.min.js","sources":["../src/model/Socket.js","../src/model/Log.js","../src/model/Link.js","../src/model/Model.js","../src/model/Node.js"],"sourcesContent":["class Socket {\n    constructor(options) {\n        this.name = options.name || 'socket';\n        this.state = options.state || {};\n        this.position = options.position || 'left';  \n    }\n}\n\nexport { Socket };","class Log {\n    constructor(options) {\n        this.name = options.name || 'log';\n        this.target = options.target || null;\n        this.states = [];\n    }\n\n    writeToLog() {\n        this.states.push({...this.target.state});\n    }\n\n    clear() {\n        this.states = [];\n    }\n}\n\nexport { Log };","class Link {\n    constructor(options) {\n        options = options || {};\n        this.name = options.name || \"link\";\n        this.socket1 = options.socket1 || null;\n        this.socket2 = options.socket2 || null;\n        this.state = options.state || {};\n    }\n\n    getOtherSocket(socket) {\n        if (socket === this.socket1) {\n            return this.socket2;\n        } else if (socket === this.socket2) {\n            return this.socket1;\n        } else {\n            return null;\n        }\n    }\n}\n\nexport { Link };","import { Socket } from './Socket.js';\nimport { Log } from './Log.js';\n\nclass Model {\n    constructor(options) {\n        options = options || {};\n        this.nodes = options.nodes || [];\n        this.links = options.links || [];\n        this.logs = options.logs || [];\n        this.maxNodeId = 0;\n        this.maxLinkId = 0;\n        this.maxLogId = 0;\n    }\n\n    getNodeId() {\n        let newNodeId = `node-${this.maxNodeId}`;\n        this.maxNodeId++;\n        return newNodeId;\n    }\n\n    getLinkId() {\n        let newLinkId = `link-${this.maxLinkId}`;\n        this.maxLinkId++;\n        return newLinkId;\n    }\n\n    getLogId() {\n        let newLogId = `log-${this.maxLogId}`;\n        this.maxLogId++;\n        return newLogId;\n    }\n\n    addNode(node) {\n        node.id = this.getNodeId();\n        this.nodes.push(node);\n    }\n\n    addLink(link) {\n        link.id = this.getLinkId();\n        const s1 = link.socket1;\n        s1.link = link;\n        s1.otherSocket = link.socket2;\n        const s2 = link.socket2;\n        s2.link = link;\n        s2.otherSocket = link.socket1;\n        this.links.push(link);\n    }\n\n    addLog(log) {\n        log.id = this.getLogId();\n        this.logs.push(log);\n    }\n\n    removeNode(node) {\n        this.nodes = this.nodes.filter(n => n !== node);\n    }\n\n    removeLink(link) {\n        this.links = this.links.filter(l => l !== link);\n    }\n\n    removeLog(log) {\n        this.logs = this.logs.filter(l => l !== log);\n    }\n\n    removeNodeById(id) {\n        this.nodes = this.nodes.filter(n => n.id !== id);\n    }\n\n    removeLinkById(id) {\n        this.links = this.links.filter(l => l.id !== id);\n    }\n\n    removeLogById(id) {\n        this.logs = this.logs.filter(l => l.id !== id);\n    }\n\n    clearLogs() {\n        this.logs.forEach(l => l.clear());\n    }\n\n    getLinkBySocket(socket) {\n        return this.links.find(l => l.socket1 === socket || l.socket2 === socket);\n    }\n\n    getNodeBySocket(socket) {\n        return this.nodes.find(n => n.sockets.includes(socket));\n    }\n\n    getNodeByName(name) {\n        return this.nodes.find(n => n.name === name);\n    }\n\n    getLinkByName(name) {\n        return this.links.find(l => l.name === name);\n    }\n\n    getNodeClassByClassName(className) {\n        if (!this.availableNodeClasses) {\n            return null;\n        }\n        const availableNodeClassNames = this.availableNodeClasses.map(c => {\n            const instance = new c();\n            return instance.className;\n        });\n        const index = availableNodeClassNames.indexOf(className);\n        if (index === -1) {\n            return null;\n        } else {\n            return this.availableNodeClasses[index];\n        }   \n    }\n\n    getLinkClassByClassName(className) {\n        if (!this.availableLinkClasses) {\n            return null;\n        }\n        if (this.availableLinkClasses.length === 1) {\n            return this.availableLinkClasses[0];\n        }\n        const availableLinkClassNames = this.availableLinkClasses.map(c => {\n            const instance = new c();\n            return instance.className;\n        });\n        const index = availableLinkClassNames.indexOf(className);\n        if (index === -1) {\n            return null;\n        } else {\n            return this.availableLinkClasses[index];\n        }   \n    }\n\n    get allSockets() {\n        return this.nodes.map(n => n.sockets).flat();\n    }\n\n    getSocketByName(socketName) {\n        console.log(this.allSockets.map(s => s.name));\n        console.log(socketName);\n        return this.allSockets.find(s => s.name == socketName);\n    }\n\n    toJson() {\n        const modelForJson = {};\n        modelForJson.config = this.config;\n        modelForJson.nodes = this.nodes.map(n => {\n            const nJson = {};\n            nJson.name = n.name;\n            nJson.className = n.className;\n            nJson.state = n.state;\n            nJson.sockets = n.sockets.map(s => {\n                const sJson = {};\n                sJson.name = s.name;\n                sJson.position = s.position;\n                sJson.state = s.state;\n                return sJson;\n            });\n            return nJson;\n        })\n        modelForJson.links = this.links.map(l => {\n            const lJson = {};\n            lJson.name = l.name;\n            lJson.socket1Name = l.socket1.name;\n            lJson.socket2Name = l.socket2.name;\n            return lJson;\n        });\n        modelForJson.logs = this.logs.map(l => {\n            const lJson = {};\n            lJson.name = l.name;\n            lJson.targetName = l.target.name;\n            return lJson;\n        });\n        return JSON.stringify(modelForJson);\n    }\n\n    saveToFile() {\n        const modelJson = this.toJson();\n        const blob = new Blob([modelJson], {type: 'application/json'});\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = 'model.json';\n        a.click();\n    }\n\n    fromJsonObject(jsonModel) {\n        console.log(jsonModel);\n        this.config = jsonModel.config;\n        jsonModel.nodes.forEach(n => {\n            const NodeClass = this.getNodeClassByClassName(n.className);\n            const node = new NodeClass(n);\n            node.sockets = n.sockets.map(s => new Socket(s));\n            console.log(node);\n            this.addNode(node);\n        });\n        console.log(\"nodes added\");\n        jsonModel.links.forEach(l => {\n            console.log(l);\n            const socket1 = this.getSocketByName(l.socket1Name);\n            const socket2 = this.getSocketByName(l.socket2Name);\n            console.log(socket1, socket2);\n            let LinkClass;\n            if (!l.className) {\n                LinkClass = this.getLinkClassByClassName();\n            } else {\n                LinkClass = this.getLinkClassByClassName(l.className);\n            }\n            console.log(LinkClass);\n            console.log(this.availableLinkClasses);\n            this.addLink(new LinkClass({name:l.name, socket1, socket2}));\n            console.log(\"link added\");\n        });\n        console.log(\"links added\");\n        jsonModel.logs.forEach(l => {\n            console.log(l);\n            const targetNode = this.getNodeByName(l.targetName);\n            const targetLink = this.getLinkByName(l.targetName);\n            console.log(targetNode, targetLink);\n            const target = targetNode || targetLink;\n            console.log(target);\n            this.addLog(new Log({name:l.name, target}));\n        });\n        console.log(\"logs added\");\n\n\n\n    }\n\n    async loadFromUrl(url) {\n        const response = await fetch(url);\n        const json = await response.json();\n        this.fromJsonObject(json);\n    }\n\n\n\n\n}\n\nexport { Model };","class Node {\n    constructor(options) {\n        this.name = options.name || 'node';\n        this.sockets = [];\n        this.state = options.state || {};\n        this.maxSocketId = 0;\n        if (options.sockets) {\n            options.sockets.forEach(socket => {\n                this.addSocket(socket);\n            });\n        }\n    }\n\n    getSocketId() {\n        let newSocketId = `socket-${this.maxSocketId}`;\n        this.maxSocketId++;\n        return newSocketId;\n    }\n\n    get leftSockets() {\n        return this.sockets.filter(s => s.position === 'left');\n    }\n\n    get rightSockets() {\n        return this.sockets.filter(s => s.position === 'right');\n    }\n\n    get topSockets() {\n        return this.sockets.filter(s => s.position === 'top');\n    }\n\n    get bottomSockets() {\n        return this.sockets.filter(s => s.position === 'bottom');\n    }\n    \n    addSocket(socket) {\n        socket.id = this.getSocketId();\n        this.sockets.push(socket);\n    }\n\n    setSocketByIndex(index, socket) {\n        socket.id = this.getSocketId();\n        this.sockets[index] = socket;\n    }\n\n    getSocketByIndex(index) {\n        return this.sockets[index];\n    }\n    \n    getSocketByName(name) {\n        return this.sockets.find(s => s.name === name);\n    }\n\n    removeSocket(socket) {\n        this.sockets = this.sockets.filter(s => s !== socket);\n    }\n\n    removeSocketById(id) {\n        this.sockets = this.sockets.filter(s => s.id !== id);\n    }\n\n    removeSocketByIndex(index) {\n        this.sockets = this.sockets.filter((s, i) => i !== index);\n    }\n\n}\n\nexport { Node };\n"],"names":["Socket","constructor","options","this","name","state","position","Log","target","states","writeToLog","push","clear","socket1","socket2","getOtherSocket","socket","nodes","links","logs","maxNodeId","maxLinkId","maxLogId","getNodeId","newNodeId","getLinkId","newLinkId","getLogId","newLogId","addNode","node","id","addLink","link","s1","otherSocket","s2","addLog","log","removeNode","filter","n","removeLink","l","removeLog","removeNodeById","removeLinkById","removeLogById","clearLogs","forEach","getLinkBySocket","find","getNodeBySocket","sockets","includes","getNodeByName","getLinkByName","getNodeClassByClassName","className","availableNodeClasses","index","map","c","indexOf","getLinkClassByClassName","availableLinkClasses","length","allSockets","flat","getSocketByName","socketName","console","s","toJson","modelForJson","config","nJson","sJson","lJson","socket1Name","socket2Name","targetName","JSON","stringify","saveToFile","modelJson","blob","Blob","type","url","URL","createObjectURL","a","document","createElement","href","download","click","fromJsonObject","jsonModel","LinkClass","targetNode","targetLink","loadFromUrl","response","fetch","json","maxSocketId","addSocket","getSocketId","newSocketId","leftSockets","rightSockets","topSockets","bottomSockets","setSocketByIndex","getSocketByIndex","removeSocket","removeSocketById","removeSocketByIndex","i"],"mappings":"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"}