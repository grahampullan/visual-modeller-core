var visualModellerCore=function(s){"use strict";class t{constructor(s){this.name=s.name||"socket",this.state=s.state||{},this.position=s.position||"left"}}class e{constructor(s){this.name=s.name||"log",this.target=s.target||null,this.states=[]}writeToLog(){this.states.push({...this.target.state})}clear(){this.states=[]}}return s.Link=class{constructor(s){s=s||{},this.name=s.name||"link",this.socket1=s.socket1||null,this.socket2=s.socket2||null,this.state=s.state||{}}getOtherSocket(s){return s===this.socket1?this.socket2:s===this.socket2?this.socket1:null}},s.Log=e,s.Model=class{constructor(s){s=s||{},this.nodes=s.nodes||[],this.links=s.links||[],this.logs=s.logs||[],this.maxNodeId=0,this.maxLinkId=0,this.maxLogId=0}getNodeId(){let s=`node-${this.maxNodeId}`;return this.maxNodeId++,s}getLinkId(){let s=`link-${this.maxLinkId}`;return this.maxLinkId++,s}getLogId(){let s=`log-${this.maxLogId}`;return this.maxLogId++,s}addNode(s){s.id=this.getNodeId(),this.nodes.push(s)}addLink(s){s.id=this.getLinkId();const t=s.socket1;t.link=s,t.otherSocket=s.socket2;const e=s.socket2;e.link=s,e.otherSocket=s.socket1,this.links.push(s)}addLog(s){s.id=this.getLogId(),this.logs.push(s)}removeNode(s){this.nodes=this.nodes.filter((t=>t!==s))}removeLink(s){this.links=this.links.filter((t=>t!==s))}removeLog(s){this.logs=this.logs.filter((t=>t!==s))}removeNodeById(s){this.nodes=this.nodes.filter((t=>t.id!==s))}removeLinkById(s){this.links=this.links.filter((t=>t.id!==s))}removeLogById(s){this.logs=this.logs.filter((t=>t.id!==s))}clearLogs(){this.logs.forEach((s=>s.clear()))}getLinkBySocket(s){return this.links.find((t=>t.socket1===s||t.socket2===s))}getNodeBySocket(s){return this.nodes.find((t=>t.sockets.includes(s)))}getNodeByName(s){return this.nodes.find((t=>t.name===s))}getLinkByName(s){return this.links.find((t=>t.name===s))}getNodeClassByClassName(s){if(!this.availableNodeClasses)return null;const t=this.availableNodeClasses.map((s=>(new s).className)).indexOf(s);return-1===t?null:this.availableNodeClasses[t]}getLinkClassByClassName(s){if(!this.availableLinkClasses)return null;if(1===this.availableLinkClasses.length)return this.availableLinkClasses[0];const t=this.availableLinkClasses.map((s=>(new s).className)).indexOf(s);return-1===t?null:this.availableLinkClasses[t]}get allSockets(){return this.nodes.map((s=>s.sockets)).flat()}getSocketByName(s){return console.log(this.allSockets.map((s=>s.name))),console.log(s),this.allSockets.find((t=>t.name==s))}toJson(){const s={};return s.config=this.config,s.nodes=this.nodes.map((s=>{const t={};return t.name=s.name,t.className=s.className,t.state=s.state,t.sockets=s.sockets.map((s=>{const t={};return t.name=s.name,t.position=s.position,t.state=s.state,t})),t})),s.links=this.links.map((s=>{const t={};return t.name=s.name,t.socket1Name=s.socket1.name,t.socket2Name=s.socket2.name,t})),s.logs=this.logs.map((s=>{const t={};return t.name=s.name,t.targetName=s.target.name,t})),JSON.stringify(s)}saveToFile(){const s=this.toJson(),t=new Blob([s],{type:"application/json"}),e=URL.createObjectURL(t),o=document.createElement("a");o.href=e,o.download="model.json",o.click()}fromJsonObject(s){console.log(s),this.config=s.config,s.nodes.forEach((s=>{const e=new(this.getNodeClassByClassName(s.className))(s);e.sockets=s.sockets.map((s=>new t(s))),console.log(e),this.addNode(e)})),console.log("nodes added"),s.links.forEach((s=>{console.log(s);const t=this.getSocketByName(s.socket1Name),e=this.getSocketByName(s.socket2Name);let o;console.log(t,e),o=s.className?this.getLinkClassByClassName(s.className):this.getLinkClassByClassName(),console.log(o),console.log(this.availableLinkClasses),this.addLink(new o({name:s.name,socket1:t,socket2:e})),console.log("link added")})),console.log("links added"),s.logs.forEach((s=>{console.log(s);const t=this.getNodeByName(s.targetName),o=this.getLinkByName(s.targetName);console.log(t,o);const i=t||o;console.log(i),this.addLog(new e({name:s.name,target:i}))})),console.log("logs added")}async loadFromUrl(s){const t=await fetch(s),e=await t.json();this.fromJsonObject(e)}},s.Node=class{constructor(s){this.name=s.name||"node",this.sockets=[],this.state=s.state||{},this.maxSocketId=0,s.sockets&&s.sockets.forEach((s=>{this.addSocket(s)}))}getSocketId(){let s=`socket-${this.maxSocketId}`;return this.maxSocketId++,s}get leftSockets(){return this.sockets.filter((s=>"left"===s.position))}get rightSockets(){return this.sockets.filter((s=>"right"===s.position))}get topSockets(){return this.sockets.filter((s=>"top"===s.position))}get bottomSockets(){return this.sockets.filter((s=>"bottom"===s.position))}addSocket(s){s.id=this.getSocketId(),this.sockets.push(s)}setSocketByIndex(s,t){t.id=this.getSocketId(),this.sockets[s]=t}getSocketByIndex(s){return this.sockets[s]}getSocketByName(s){return this.sockets.find((t=>t.name===s))}removeSocket(s){this.sockets=this.sockets.filter((t=>t!==s))}removeSocketById(s){this.sockets=this.sockets.filter((t=>t.id!==s))}removeSocketByIndex(s){this.sockets=this.sockets.filter(((t,e)=>e!==s))}},s.Socket=t,s}({});
//# sourceMappingURL=visual-modeller-core.min.js.map
